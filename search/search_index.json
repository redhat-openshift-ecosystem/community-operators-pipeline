{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this repository Documentation contributions For changes in the documentation, please raise a PR against redhat-openshift-ecosystem/community-operators-pipeline:documentation-admin . Reporting Bugs Use the issue tracker in this repository to report bugs.","title":"Overview"},{"location":"#about-this-repository","text":"","title":"About this repository"},{"location":"#documentation-contributions","text":"For changes in the documentation, please raise a PR against redhat-openshift-ecosystem/community-operators-pipeline:documentation-admin .","title":"Documentation contributions"},{"location":"#reporting-bugs","text":"Use the issue tracker in this repository to report bugs.","title":"Reporting Bugs"},{"location":"framework/development/","text":"Project development structure TODO Explain that it is in 3 parts (project+ playbooks+ framework(workflows)) add main brach to Producion operator repositories table explain opp.sh and point to function where it desides what ansible arguments to use what happen when dev is changed to latest (only workflows changes) and in latest playbook image (latest) is generated Staging vs prod (dev vs latest in image) point to config file how to produce dev playbook image Switch k8s and ocp in staging Development The staging environment is located at https://github.com/redhat-openshift-ecosystem/community-operators-pipeline prject. It can simulate stable and development setup. The Name Project Barnches Framework https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ci/latest and ci/dev ci/dev vs ci/latest upstream-community-dev vs upstream-community How to trigger playbook image build Custom de image from custom branch There is also an option to use your own branch upstream-community-dev-<SOMETHING> . Then you can trigger playbook dev image build the same way as described above. Playbook image build","title":"Develop"},{"location":"framework/development/#project-development-structure","text":"","title":"Project development structure"},{"location":"framework/development/#todo","text":"Explain that it is in 3 parts (project+ playbooks+ framework(workflows)) add main brach to Producion operator repositories table explain opp.sh and point to function where it desides what ansible arguments to use what happen when dev is changed to latest (only workflows changes) and in latest playbook image (latest) is generated Staging vs prod (dev vs latest in image) point to config file how to produce dev playbook image Switch k8s and ocp in staging","title":"TODO"},{"location":"framework/development/#development","text":"The staging environment is located at https://github.com/redhat-openshift-ecosystem/community-operators-pipeline prject. It can simulate stable and development setup. The Name Project Barnches Framework https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ci/latest and ci/dev","title":"Development"},{"location":"framework/development/#cidev-vs-cilatest","text":"","title":"ci/dev vs ci/latest"},{"location":"framework/development/#upstream-community-dev-vs-upstream-community","text":"","title":"upstream-community-dev vs upstream-community"},{"location":"framework/development/#how-to-trigger-playbook-image-build","text":"","title":"How to trigger playbook image build"},{"location":"framework/development/#custom-de-image-from-custom-branch","text":"There is also an option to use your own branch upstream-community-dev-<SOMETHING> . Then you can trigger playbook dev image build the same way as described above.","title":"Custom de image from custom branch"},{"location":"framework/development/#playbook-image-build","text":"","title":"Playbook image build"},{"location":"framework/overview/","text":"Framework Overview Introduction The goal of the community operator pipeline framework project is to deploy and configure pipelines for various flavors of Kubernetes or Openshift clusters and publish multiple versions of operator indexes. GitHub projects via GitHub Action technology are supported. Currently, the following projects are supported: Codebase and development Name Project Barnches Framework https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ci/latest and ci/dev Ansible playbooks https://github.com/redhat-openshift-ecosystem/operator-test-playbooks upstream-community and upstream-community-dev User and maintainer documentation ( k8s and ocp ) https://github.com/redhat-openshift-ecosystem/community-operators-pipeline documentation Admin Documentation https://github.com/redhat-openshift-ecosystem/community-operators-pipeline documentation-admin Producion operator repositories Name Project Configuration Kubernetes operators ( OperatorHub.io ) https://github.com/k8s-operatorhub/community-operators pipeline-config.yaml OpenShift ( OCP ) operators https://github.com/redhat-openshift-ecosystem/community-operators-prod pipeline-config.yaml Staging environment https://github.com/redhat-openshift-ecosystem/community-operators-pipeline pipeline-config-k8s.yaml and pipeline-config-ocp.yaml Project structure Each project should contain the following directory structure $ tree -L 1 --sort=mtime -a . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 .github \u251c\u2500\u2500 categories.json \u251c\u2500\u2500 upstream.Dockerfile \u251c\u2500\u2500 scripts \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docs \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 ci \u251c\u2500\u2500 operators \u2514\u2500\u2500 .git The following table is describing each file or directory File Description README.md Main README file ci/ Project CI configration directory operators/ Directory contains all operators with the versions categories.json Config file with list of categories config.yaml Operator pipelines config file docs/ Contains file with pull request predefined template (generated by the framework. Don't change!!!) .github/workflows Directory contains GitHub Action workflows (generated by the framework. Don't change!!!) upstream.Dockerfile Dockerfile needed for CI pipeline (generated by the framework. Don't change!!!) scripts/ Temporary scripts directory (generated by the framework. Don't change!!!) Testing Pipeline via GitHub Action The testing pipeline flow chart is shown below flowchart TD A0[PR] A0 --> |push| B0(Operator test) A0 --> |push| C0(Operator CI) A0 --> |labeled| D0(Operator CI Labels) A0 --> |push| E0(DCO test) A0 --> |comment| F0[&#47retest] A0 --> |comment| G0[&#47merge possible] B0 --> |job|B10[lemon] B0 --> |job|B11[orange] B0 --> |job|B12[kiwi] E0 --> E1(DCO Workflow Complete) F0 --> F1(Issue Comments - retest) G0 --> G1(Issue Comments - merge) B10 --> B2(Operator Workflow Complete) B11 --> B2 B12 --> B2 B2 --> |handle label| B3[package-validated] B3 --> |handle label| B4[installation-validated] B4 --> |make comment| B5[&#47merge possible] C0 --> |job|C1[operator-automerge-enabled] C1 --> |handled label|C2[automerge-disabled] C2 --> |job|C20[operator-ci] C20 --> |handle label|C21[new-operator] C20 --> |handle label|C22[allow/operator-version-overwrite] C20 --> |handle label|C23[allow/operator-recreate] C20 --> |on error|C24[Fail + PR comment] D0 --> |handle label|D1[authorized-changes] D1 --> |make comment|G0 G1 --> G2[automerge] F1 --> |make comment|F20[&#47hold] F1 --> |make comment|F21[&#47hold cancel] E1 --> |handle label|E2[dco-failed] Download or edit Release Pipeline via GitHub Action The release pipeline flow charts are shown below Openshift(ocp) flowchart LR A0(PR-traffic-light) A0 --> A1(Remove Operator) A1 --> A2(Index check) A2 --> A3(Bundles) A3 --> A4(Index) A4 --> A5(Index verify) A5 --> A6(Slack notification) Download or edit Kubernetes(k8s) with publishing index into operatorhub.io flowchart LR A0(PR-traffic-light) A0 --> A1(Remove Operator) A1 --> A2(Index check) A2 --> A3(Bundles) A3 --> A4(Index) A4 --> A50(OHIO image) A4 --> A51(Index verify) A50 --> A6(Release / operatorhub.io) A6 --> A7(Slack notification) A51 --> A7 Download or edit","title":"Overview"},{"location":"framework/overview/#framework-overview","text":"","title":"Framework Overview"},{"location":"framework/overview/#introduction","text":"The goal of the community operator pipeline framework project is to deploy and configure pipelines for various flavors of Kubernetes or Openshift clusters and publish multiple versions of operator indexes. GitHub projects via GitHub Action technology are supported. Currently, the following projects are supported:","title":"Introduction"},{"location":"framework/overview/#codebase-and-development","text":"Name Project Barnches Framework https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ci/latest and ci/dev Ansible playbooks https://github.com/redhat-openshift-ecosystem/operator-test-playbooks upstream-community and upstream-community-dev User and maintainer documentation ( k8s and ocp ) https://github.com/redhat-openshift-ecosystem/community-operators-pipeline documentation Admin Documentation https://github.com/redhat-openshift-ecosystem/community-operators-pipeline documentation-admin","title":"Codebase and development"},{"location":"framework/overview/#producion-operator-repositories","text":"Name Project Configuration Kubernetes operators ( OperatorHub.io ) https://github.com/k8s-operatorhub/community-operators pipeline-config.yaml OpenShift ( OCP ) operators https://github.com/redhat-openshift-ecosystem/community-operators-prod pipeline-config.yaml Staging environment https://github.com/redhat-openshift-ecosystem/community-operators-pipeline pipeline-config-k8s.yaml and pipeline-config-ocp.yaml","title":"Producion operator repositories"},{"location":"framework/overview/#project-structure","text":"Each project should contain the following directory structure $ tree -L 1 --sort=mtime -a . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 .github \u251c\u2500\u2500 categories.json \u251c\u2500\u2500 upstream.Dockerfile \u251c\u2500\u2500 scripts \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docs \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 ci \u251c\u2500\u2500 operators \u2514\u2500\u2500 .git The following table is describing each file or directory File Description README.md Main README file ci/ Project CI configration directory operators/ Directory contains all operators with the versions categories.json Config file with list of categories config.yaml Operator pipelines config file docs/ Contains file with pull request predefined template (generated by the framework. Don't change!!!) .github/workflows Directory contains GitHub Action workflows (generated by the framework. Don't change!!!) upstream.Dockerfile Dockerfile needed for CI pipeline (generated by the framework. Don't change!!!) scripts/ Temporary scripts directory (generated by the framework. Don't change!!!)","title":"Project structure"},{"location":"framework/overview/#testing-pipeline-via-github-action","text":"The testing pipeline flow chart is shown below flowchart TD A0[PR] A0 --> |push| B0(Operator test) A0 --> |push| C0(Operator CI) A0 --> |labeled| D0(Operator CI Labels) A0 --> |push| E0(DCO test) A0 --> |comment| F0[&#47retest] A0 --> |comment| G0[&#47merge possible] B0 --> |job|B10[lemon] B0 --> |job|B11[orange] B0 --> |job|B12[kiwi] E0 --> E1(DCO Workflow Complete) F0 --> F1(Issue Comments - retest) G0 --> G1(Issue Comments - merge) B10 --> B2(Operator Workflow Complete) B11 --> B2 B12 --> B2 B2 --> |handle label| B3[package-validated] B3 --> |handle label| B4[installation-validated] B4 --> |make comment| B5[&#47merge possible] C0 --> |job|C1[operator-automerge-enabled] C1 --> |handled label|C2[automerge-disabled] C2 --> |job|C20[operator-ci] C20 --> |handle label|C21[new-operator] C20 --> |handle label|C22[allow/operator-version-overwrite] C20 --> |handle label|C23[allow/operator-recreate] C20 --> |on error|C24[Fail + PR comment] D0 --> |handle label|D1[authorized-changes] D1 --> |make comment|G0 G1 --> G2[automerge] F1 --> |make comment|F20[&#47hold] F1 --> |make comment|F21[&#47hold cancel] E1 --> |handle label|E2[dco-failed] Download or edit","title":"Testing Pipeline via GitHub Action"},{"location":"framework/overview/#release-pipeline-via-github-action","text":"The release pipeline flow charts are shown below","title":"Release Pipeline via GitHub Action"},{"location":"project/develop/","text":"Development TODO Explain workflow of playbooks and Github Action workflows step by step How to fix bug or develop feature How to test developemnt changes QA How to add comment in PR How to fix error in test or release I want to add label to PR where to change","title":"Developent"},{"location":"project/develop/#development","text":"","title":"Development"},{"location":"project/develop/#todo","text":"Explain workflow of playbooks and Github Action workflows step by step How to fix bug or develop feature How to test developemnt changes QA How to add comment in PR How to fix error in test or release I want to add label to PR where to change","title":"TODO"},{"location":"project/init/","text":"Initialize new project TODO Project directory structure Secrets How to do first upgrade Test first operator Create empty project The project administrator has to create an empty GitHub project configure one configuration file set up various secrets create the directory structure shown here Configuration The configuration file has to be stored in $PROJECT_DIR/ci/pipeline-config.yaml . There are three main sections production pipeline operatorhubio (for k8s ) Supported config options are explained for all sections below Production production: type: ocp bundle: registry: quay.io organization: openshift-community-operators index: registry: quay.io organization: openshift-community-operators name: catalog_tmp tags: - v4.8-db - v4.9-db - v4.10-db - v4.11 - v4.12 signature: enabled: 1 alias: registry.redhat.io/redhat/community-operator-index endpoint: https://community-signing-pipeline-prod.apps.pipelines-prod.ijdb.p1.openshiftapps.com mirror: enabled: 1 multiarch: base: registry.redhat.io/openshift4/ose-operator-registry base_tags: - v4.5 - v4.6 - v4.7 - v4.8 - v4.9 - v4.10 - v4.11 postfix: s registry: quay.io organization: redhat name: redhat----community-operator-index username: in: mavala out: redhat+iib_community test: installation_skip: - ack- - community-windows-machine-config-operator Name Description Possible options production.type Cluster type k8s or ocp production.bundle Registry and organization for bundles registry and organization production.index Registry, organization and for temporary index registry , organization and name production.index.tags List of index tags latest for k8s and v4.8-db, v4.9-db, v4.10-db, v4.11, v4.12 for ocp production.index.signature Alias and endpoint to sign index image enabled , alias and endpoint production.mirror Production index setup enabled , registry , organization and name production.mirror.base From image used for index enabled , registry , organization and name production.mirror.base_tags List of tags used for from index. (When not exist most recent used) v4.5 ... v4.11 production.mirror.postfix Type of index used for production tag index: <empty> or sha index: s production.mirror.username.in Credential username used for accessing registry.redhat.io production.mirror.username.out Credential username used for pushing to production registry production.test.installation_skip List of projects that installation test will be skipped multiple operator names (eg. ack- is for operators starting with ack- ) Pipeline pipeline: base: https://github.com repo: k8s-operatorhub/community-operators branch: main ci_scripts_dir: https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-pipeline/ci/latest/ci/scripts image: quay.io/operator_testing/operator-test-playbooks:latest playbooks: repo: https://github.com/redhat-openshift-ecosystem/operator-test-playbooks branch: \"upstream-community\" automerge: enabled: 1 reviewers: enabled: 1 notifications: slack: 1 Name Description Possble options pipeline.base GitHub project base https://github.com pipeline.repo GitHub project org/repo eg. k8s-operatorhub/community-operators pipeline.branch GitHub project branch used for operators eg. main pipeline.ci_scripts_dir Location of framework ci scripts using ci/latest branch pipeline.image Image used for container that tests and release quay.io/operator_testing/operator-test-playbooks:latest or quay.io/operator_testing/operator-test-playbooks:dev pipeline.playbooks Playbook repo used as default repo and branch pipeline.automerge Flag if automerge is enabled enabled pipeline.reviewers Flag if reviewers is enabled enabled pipeline.notifications Flag if notifications is enabled slack Operatorhubio operatorhubio: enabled: 1 registry: quay.io organization: operator-framework name: upstream-community-operators tag: latest Name Description Value production.operatorhubio Index image used to generate operatorhub.io page enabled , registry , organization , name and tag Secrets Screenshot of GitHub action secrets The table is explaining Name Description ACTION_MONITORING_SLACK Slack webhook credentials FRAMEWORK_MERGE GitHub action token for framework-automation user to be able to automerge GH_TOKEN GitHub action token for framework-automation to produce statistics IIB_INPUT_REGISTRY_TOKEN Token for user $IIB_INPUT_REGISTRY_USER to be able to access registry.redhat.io PREPARE_INDEX_API_TOKEN Quay application Token (user: $oauth ) used for preparing temporary index for prow jobs REGISTRY_MIRROR_PW Token for user $REGISTRY_MIRROR_USER to be able to push to production (mirror) index REGISTRY_RELEASE_API_TOKEN Quay application Token (user: $oauth ) used for pushing to release index REPO_GHA_PAT GitHub access token (deprecated) OHIO_REGISTRY_TOKEN Quay application token (user: $oauth ) to push index image used for operatorhub.io web page SIGNATURE_WEBHOOK_PASSWD Index signrature password SIGNATURE_WEBHOOK_REQUESTER_EMAIL Index signrature requester email SIGNATURE_WEBHOOK_SECRET Index signrature secret Generate Github Action workflows Note On newly created projects one should copy the file ( upgrade.yaml ) to .github/workflows/upgrade.yaml and push it into main branch so CI Upgrade workflow is enabled in the Actions tab in the GitHub project. After the directory and configurations are in place one can generate all workflows by running Upgrade Action from the configured project. More details one can find here One can verify Upgrade CI GitHub Action. See screenshot below","title":"Initialize"},{"location":"project/init/#initialize-new-project","text":"","title":"Initialize new project"},{"location":"project/init/#todo","text":"Project directory structure Secrets How to do first upgrade Test first operator","title":"TODO"},{"location":"project/init/#create-empty-project","text":"The project administrator has to create an empty GitHub project configure one configuration file set up various secrets create the directory structure shown here","title":"Create empty project"},{"location":"project/init/#configuration","text":"The configuration file has to be stored in $PROJECT_DIR/ci/pipeline-config.yaml . There are three main sections production pipeline operatorhubio (for k8s ) Supported config options are explained for all sections below","title":"Configuration"},{"location":"project/init/#production","text":"production: type: ocp bundle: registry: quay.io organization: openshift-community-operators index: registry: quay.io organization: openshift-community-operators name: catalog_tmp tags: - v4.8-db - v4.9-db - v4.10-db - v4.11 - v4.12 signature: enabled: 1 alias: registry.redhat.io/redhat/community-operator-index endpoint: https://community-signing-pipeline-prod.apps.pipelines-prod.ijdb.p1.openshiftapps.com mirror: enabled: 1 multiarch: base: registry.redhat.io/openshift4/ose-operator-registry base_tags: - v4.5 - v4.6 - v4.7 - v4.8 - v4.9 - v4.10 - v4.11 postfix: s registry: quay.io organization: redhat name: redhat----community-operator-index username: in: mavala out: redhat+iib_community test: installation_skip: - ack- - community-windows-machine-config-operator Name Description Possible options production.type Cluster type k8s or ocp production.bundle Registry and organization for bundles registry and organization production.index Registry, organization and for temporary index registry , organization and name production.index.tags List of index tags latest for k8s and v4.8-db, v4.9-db, v4.10-db, v4.11, v4.12 for ocp production.index.signature Alias and endpoint to sign index image enabled , alias and endpoint production.mirror Production index setup enabled , registry , organization and name production.mirror.base From image used for index enabled , registry , organization and name production.mirror.base_tags List of tags used for from index. (When not exist most recent used) v4.5 ... v4.11 production.mirror.postfix Type of index used for production tag index: <empty> or sha index: s production.mirror.username.in Credential username used for accessing registry.redhat.io production.mirror.username.out Credential username used for pushing to production registry production.test.installation_skip List of projects that installation test will be skipped multiple operator names (eg. ack- is for operators starting with ack- )","title":"Production"},{"location":"project/init/#pipeline","text":"pipeline: base: https://github.com repo: k8s-operatorhub/community-operators branch: main ci_scripts_dir: https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-pipeline/ci/latest/ci/scripts image: quay.io/operator_testing/operator-test-playbooks:latest playbooks: repo: https://github.com/redhat-openshift-ecosystem/operator-test-playbooks branch: \"upstream-community\" automerge: enabled: 1 reviewers: enabled: 1 notifications: slack: 1 Name Description Possble options pipeline.base GitHub project base https://github.com pipeline.repo GitHub project org/repo eg. k8s-operatorhub/community-operators pipeline.branch GitHub project branch used for operators eg. main pipeline.ci_scripts_dir Location of framework ci scripts using ci/latest branch pipeline.image Image used for container that tests and release quay.io/operator_testing/operator-test-playbooks:latest or quay.io/operator_testing/operator-test-playbooks:dev pipeline.playbooks Playbook repo used as default repo and branch pipeline.automerge Flag if automerge is enabled enabled pipeline.reviewers Flag if reviewers is enabled enabled pipeline.notifications Flag if notifications is enabled slack","title":"Pipeline"},{"location":"project/init/#operatorhubio","text":"operatorhubio: enabled: 1 registry: quay.io organization: operator-framework name: upstream-community-operators tag: latest Name Description Value production.operatorhubio Index image used to generate operatorhub.io page enabled , registry , organization , name and tag","title":"Operatorhubio"},{"location":"project/init/#secrets","text":"Screenshot of GitHub action secrets The table is explaining Name Description ACTION_MONITORING_SLACK Slack webhook credentials FRAMEWORK_MERGE GitHub action token for framework-automation user to be able to automerge GH_TOKEN GitHub action token for framework-automation to produce statistics IIB_INPUT_REGISTRY_TOKEN Token for user $IIB_INPUT_REGISTRY_USER to be able to access registry.redhat.io PREPARE_INDEX_API_TOKEN Quay application Token (user: $oauth ) used for preparing temporary index for prow jobs REGISTRY_MIRROR_PW Token for user $REGISTRY_MIRROR_USER to be able to push to production (mirror) index REGISTRY_RELEASE_API_TOKEN Quay application Token (user: $oauth ) used for pushing to release index REPO_GHA_PAT GitHub access token (deprecated) OHIO_REGISTRY_TOKEN Quay application token (user: $oauth ) to push index image used for operatorhub.io web page SIGNATURE_WEBHOOK_PASSWD Index signrature password SIGNATURE_WEBHOOK_REQUESTER_EMAIL Index signrature requester email SIGNATURE_WEBHOOK_SECRET Index signrature secret","title":"Secrets"},{"location":"project/init/#generate-github-action-workflows","text":"Note On newly created projects one should copy the file ( upgrade.yaml ) to .github/workflows/upgrade.yaml and push it into main branch so CI Upgrade workflow is enabled in the Actions tab in the GitHub project. After the directory and configurations are in place one can generate all workflows by running Upgrade Action from the configured project. More details one can find here One can verify Upgrade CI GitHub Action. See screenshot below","title":"Generate Github Action workflows"},{"location":"project/k8s/","text":"Project maintain TODO Overview","title":"Kubernetes"},{"location":"project/k8s/#project-maintain","text":"","title":"Project maintain"},{"location":"project/k8s/#todo","text":"","title":"TODO"},{"location":"project/k8s/#overview","text":"","title":"Overview"},{"location":"project/maintain/","text":"Project maintain TODO How to upgrade Project upgrade GitHub Action - CI Upgrade On every workflow template and config change, one has to run an upgrade to apply changes for each project. Name Description Commit message prefix Prefix added to commit message after upgrade Source repository Framework (workflow templates) project ( https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ) Source branch Framework (workflow templates) branch ( ci/latest ) Playbook branch Branch ( upstream-community ) in ansible playbooks are taken to upgrade Cluster type (k8s or ocp) Cluster type for repo. Possible options k8s or ocp From index (quay.io/operator_testing/index_empty:latest) Optional parameter to initialize or copy index image to nonexisten images","title":"Common"},{"location":"project/maintain/#project-maintain","text":"","title":"Project maintain"},{"location":"project/maintain/#todo","text":"How to upgrade","title":"TODO"},{"location":"project/maintain/#project-upgrade","text":"","title":"Project upgrade"},{"location":"project/maintain/#github-action-ci-upgrade","text":"On every workflow template and config change, one has to run an upgrade to apply changes for each project. Name Description Commit message prefix Prefix added to commit message after upgrade Source repository Framework (workflow templates) project ( https://github.com/redhat-openshift-ecosystem/community-operators-pipeline ) Source branch Framework (workflow templates) branch ( ci/latest ) Playbook branch Branch ( upstream-community ) in ansible playbooks are taken to upgrade Cluster type (k8s or ocp) Cluster type for repo. Possible options k8s or ocp From index (quay.io/operator_testing/index_empty:latest) Optional parameter to initialize or copy index image to nonexisten images","title":"GitHub Action - CI Upgrade"},{"location":"project/ocp/","text":"OCP The following part is related to Openshift only. How OCP installation is tested Prow is an external OpenShift release tooling framework that is used as an installation test in the community pipeline. How to edit prow building block configuration Prow is configured at openshift repository . Open a PR and get LGTM approval from your colleague to get an automatic merge. In case you are creating a new project, make sure openshift-ci-robot is added as a collaborator to the project with Admin rights. Overview The prow job is automatically triggered for every OCP PR if GH Action did not fail at the beginning. See the structure below. graph TD openshift-deploy.sh --> openshift-deploy-core.sh --> waiting(\"wait for hash label on Quay\") --> deploy_olm_operator_openshift_upstream openshift-deploy-core.sh --> prepare_test_index prepare_test_index -.-> Quay Quay -.-> deploy_olm_operator_openshift_upstream style Quay stroke-dasharray: 5 5 subgraph prow openshift-deploy.sh & openshift-deploy-core.sh & waiting subgraph Ansible role deploy_olm_operator_openshift_upstream end end subgraph GH Action job prepare_test_index & Quay end Openshift robot triggers cluster setup for every supported OCP version. When the cluster is ready, openshift-deploy.sh is executed. The script calls another script openshift-deploy-core.sh which triggers GH Action prepare_test_index . During the action run, it pushes the index and a bundle to Quay tagged by a commit hash. Once images are pushed, the playbook role deploy_olm_operator_openshift_upstream is triggered which pulls the images and installs the operator. Where to edit the main openshift script To edit openshift-deploy.sh located in ci/prow of the project, first edit openshift-deploy.sh located in CI repository. Then upgrade the project running Upgrade CI . The same applies for openshift-deploy-core.sh . Consider using ci/dev instead of ci/latest during development as described here . Where to edit deploy_olm_operator_openshift_upstream role Like every Ansible role, editing is possible in upstream directory of ansible playbook repository . When using the production branch upstream-community , automatic playbook image build is triggered. When using the development branch upstream-community-dev , please trigger playbook image build manually as described here . Consider using upstream-community-dev instead of upstream-community during development as described here . Where to edit or restart prepare_test_index action To restart prepare_test_index action, go to GH Actions of the project. When an edit is needed, go to templates . Consider using ci/dev instead of ci/latest during development as described here . Release brand new index for OCP Let's assume we are going to release the index for OCP v4.13 . Prerequisities Before running an automatic GH action that creates indexes itself, there are some prerequisites administrator should prepare in a specific order: Add new index mapping Enable Pyxis support for a specific index Set maximum oc version available OCP and K8S alignment Enable breaking API testing if supported by operator-sdk When all done, bump ocp_version_example variable so next time examples are up to date :) Add new index mapping Always check and add the current index (e.g. v4.13 ) version to operator_info role defaults and to k8s2ocp and ocp2k8s converting tables in bundle_validation_filter OCP2K8S and KIND_SUPPORT_TABLE variable in ci/dev and ci/latest consequently Enable Pyxis support for a new index To enable pyxis support for a specific index, clone the issue . And update index number (e.g. v4.13 ) in the description. Set maximum oc version available Edit oc_version_max in playbook defaults only if 4.x (e.g. v4.13 ) is available at https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.x/openshift-client-linux.tar.gz (e.g. https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.13/openshift-client-linux.tar.gz) OCP and K8S alignment Despite this documentation being focused on OCP, alignment with k8s is needed on community-operators k8s-operatorhub repository. Firstly, set kind_version to the latest kind according to https://github.com/kubernetes-sigs/kind/releases (e.g. v0.17.0). Also the same page contains semver version of a specific k8s image. So for 1.25 we are reading v1.25.3 . Set the value as kind_kube_version . Enable breaking API testing if supported by operator-sdk If there is some breaking API in a new index (e.g. v4.13 ), please edit bundle_validation_filter role defaults to enable testing if API is broken in a specific operator. Release process Firstly, the index must be defined in pipeline-config-ocp.yaml file. There are old entries like v4.10-db where -db means index is in SQLlite format. It is just for the information, not important here. A new entry can be one of the following: - v4.13-maintenance - release the specific index will not be executed, kiwi lemon orange tests are always green, failed Prow is not blocking merge action - v4.13-rc - release the specific index will be executed, kiwi lemon orange tests are always green, failed Prow is not blocking merge action - v4.13 - full production setup, needs all tests green before merge action Admins are asked to provide a new Openshift index a couple of months before a new Openshift version is GA. There are 2 ways of releasing a new index. The very first step is to have the entry in pipeline-config-ocp.yaml like in the example: - v4.13-maintenance . This is a label for the target index in case of a new index release. Release from a previous index This is a recommended way. Much faster and easier to execute. Everything is managed by the automatic workflow called CI Upgrade . Fill fields as shown below. The most important field is From index . There should be a path directly to a previous _tmp image. Use path like quay.io/openshift-community-operators/catalog_tmp:v4.12 if you would like to release v4.13 . When the workflow is finished, see the list of operators to fix in the new index. The list is located on the GH workflow output page as Upgrade summary . The example Upgrade pipeline is located here . Create local changes step in upgrade job does the whole process. The log is located here Then you need to fix operators by running Operator release manual . Set values as in the example below. The most important field is the List of operators ... - it is a place to put the output from the previous workflow under the Upgrade summary . The list is already space delimited. The example Manual release pipeline schema is located here and the example output with steps here ](https://github.com/redhat-openshift-ecosystem/community-operators-prod/actions/runs/3740100606/jobs/6349116153){:target=\"_blank\"}. How to rebuild an existing index from scratch There can be cases when differences between an actual and a new index are huge. In this case, it makes sense to fill the new index from scratch. You need only Operator release manual . Be ready for a day or more and multiple manual triggers of the same workflow type with a different set of operators. This time, a List of operators... is a list of all operators in the GitHub repository divided into chunks that can be processed in 6 hours or less each. Hence GH actions limit. The best practice is to use 1/5th of the full operator list divided by a space. A release process in this case is long this way so use it as a last resort. It can be partially optimized by running over operators sorted by the number of versions inside a package. It helps the parallel process to finish smaller operators sooner. Do not enable Push final index to production until all operators are processed. Or you can always leave the value 0 and the next automatic merge will push also your changes to production. Release process is expected to fail at the end due to the fact, that index is not fully synchronized until all operators are processed. It is OK.","title":"Openshift (OCP)"},{"location":"project/ocp/#ocp","text":"The following part is related to Openshift only.","title":"OCP"},{"location":"project/ocp/#how-ocp-installation-is-tested","text":"Prow is an external OpenShift release tooling framework that is used as an installation test in the community pipeline.","title":"How OCP installation is tested"},{"location":"project/ocp/#how-to-edit-prow-building-block-configuration","text":"Prow is configured at openshift repository . Open a PR and get LGTM approval from your colleague to get an automatic merge. In case you are creating a new project, make sure openshift-ci-robot is added as a collaborator to the project with Admin rights.","title":"How to edit prow building block configuration"},{"location":"project/ocp/#overview","text":"The prow job is automatically triggered for every OCP PR if GH Action did not fail at the beginning. See the structure below. graph TD openshift-deploy.sh --> openshift-deploy-core.sh --> waiting(\"wait for hash label on Quay\") --> deploy_olm_operator_openshift_upstream openshift-deploy-core.sh --> prepare_test_index prepare_test_index -.-> Quay Quay -.-> deploy_olm_operator_openshift_upstream style Quay stroke-dasharray: 5 5 subgraph prow openshift-deploy.sh & openshift-deploy-core.sh & waiting subgraph Ansible role deploy_olm_operator_openshift_upstream end end subgraph GH Action job prepare_test_index & Quay end Openshift robot triggers cluster setup for every supported OCP version. When the cluster is ready, openshift-deploy.sh is executed. The script calls another script openshift-deploy-core.sh which triggers GH Action prepare_test_index . During the action run, it pushes the index and a bundle to Quay tagged by a commit hash. Once images are pushed, the playbook role deploy_olm_operator_openshift_upstream is triggered which pulls the images and installs the operator.","title":"Overview"},{"location":"project/ocp/#where-to-edit-the-main-openshift-script","text":"To edit openshift-deploy.sh located in ci/prow of the project, first edit openshift-deploy.sh located in CI repository. Then upgrade the project running Upgrade CI . The same applies for openshift-deploy-core.sh . Consider using ci/dev instead of ci/latest during development as described here .","title":"Where to edit the main openshift script"},{"location":"project/ocp/#where-to-edit-deploy_olm_operator_openshift_upstream-role","text":"Like every Ansible role, editing is possible in upstream directory of ansible playbook repository . When using the production branch upstream-community , automatic playbook image build is triggered. When using the development branch upstream-community-dev , please trigger playbook image build manually as described here . Consider using upstream-community-dev instead of upstream-community during development as described here .","title":"Where to edit deploy_olm_operator_openshift_upstream role"},{"location":"project/ocp/#where-to-edit-or-restart-prepare_test_index-action","text":"To restart prepare_test_index action, go to GH Actions of the project. When an edit is needed, go to templates . Consider using ci/dev instead of ci/latest during development as described here .","title":"Where to edit or restart prepare_test_index action"},{"location":"project/ocp/#release-brand-new-index-for-ocp","text":"Let's assume we are going to release the index for OCP v4.13 .","title":"Release brand new index for OCP"},{"location":"project/ocp/#prerequisities","text":"Before running an automatic GH action that creates indexes itself, there are some prerequisites administrator should prepare in a specific order: Add new index mapping Enable Pyxis support for a specific index Set maximum oc version available OCP and K8S alignment Enable breaking API testing if supported by operator-sdk When all done, bump ocp_version_example variable so next time examples are up to date :)","title":"Prerequisities"},{"location":"project/ocp/#add-new-index-mapping","text":"Always check and add the current index (e.g. v4.13 ) version to operator_info role defaults and to k8s2ocp and ocp2k8s converting tables in bundle_validation_filter OCP2K8S and KIND_SUPPORT_TABLE variable in ci/dev and ci/latest consequently","title":"Add new index mapping"},{"location":"project/ocp/#enable-pyxis-support-for-a-new-index","text":"To enable pyxis support for a specific index, clone the issue . And update index number (e.g. v4.13 ) in the description.","title":"Enable Pyxis support for a new index"},{"location":"project/ocp/#set-maximum-oc-version-available","text":"Edit oc_version_max in playbook defaults only if 4.x (e.g. v4.13 ) is available at https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.x/openshift-client-linux.tar.gz (e.g. https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-4.13/openshift-client-linux.tar.gz)","title":"Set maximum oc version available"},{"location":"project/ocp/#ocp-and-k8s-alignment","text":"Despite this documentation being focused on OCP, alignment with k8s is needed on community-operators k8s-operatorhub repository. Firstly, set kind_version to the latest kind according to https://github.com/kubernetes-sigs/kind/releases (e.g. v0.17.0). Also the same page contains semver version of a specific k8s image. So for 1.25 we are reading v1.25.3 . Set the value as kind_kube_version .","title":"OCP and K8S alignment"},{"location":"project/ocp/#release-process","text":"Firstly, the index must be defined in pipeline-config-ocp.yaml file. There are old entries like v4.10-db where -db means index is in SQLlite format. It is just for the information, not important here. A new entry can be one of the following: - v4.13-maintenance - release the specific index will not be executed, kiwi lemon orange tests are always green, failed Prow is not blocking merge action - v4.13-rc - release the specific index will be executed, kiwi lemon orange tests are always green, failed Prow is not blocking merge action - v4.13 - full production setup, needs all tests green before merge action Admins are asked to provide a new Openshift index a couple of months before a new Openshift version is GA. There are 2 ways of releasing a new index. The very first step is to have the entry in pipeline-config-ocp.yaml like in the example: - v4.13-maintenance . This is a label for the target index in case of a new index release.","title":"Release process"},{"location":"project/ocp/#release-from-a-previous-index","text":"This is a recommended way. Much faster and easier to execute. Everything is managed by the automatic workflow called CI Upgrade . Fill fields as shown below. The most important field is From index . There should be a path directly to a previous _tmp image. Use path like quay.io/openshift-community-operators/catalog_tmp:v4.12 if you would like to release v4.13 . When the workflow is finished, see the list of operators to fix in the new index. The list is located on the GH workflow output page as Upgrade summary . The example Upgrade pipeline is located here . Create local changes step in upgrade job does the whole process. The log is located here Then you need to fix operators by running Operator release manual . Set values as in the example below. The most important field is the List of operators ... - it is a place to put the output from the previous workflow under the Upgrade summary . The list is already space delimited. The example Manual release pipeline schema is located here and the example output with steps here ](https://github.com/redhat-openshift-ecosystem/community-operators-prod/actions/runs/3740100606/jobs/6349116153){:target=\"_blank\"}.","title":"Release from a previous index"},{"location":"project/ocp/#how-to-rebuild-an-existing-index-from-scratch","text":"There can be cases when differences between an actual and a new index are huge. In this case, it makes sense to fill the new index from scratch. You need only Operator release manual . Be ready for a day or more and multiple manual triggers of the same workflow type with a different set of operators. This time, a List of operators... is a list of all operators in the GitHub repository divided into chunks that can be processed in 6 hours or less each. Hence GH actions limit. The best practice is to use 1/5th of the full operator list divided by a space. A release process in this case is long this way so use it as a last resort. It can be partially optimized by running over operators sorted by the number of versions inside a package. It helps the parallel process to finish smaller operators sooner. Do not enable Push final index to production until all operators are processed. Or you can always leave the value 0 and the next automatic merge will push also your changes to production. Release process is expected to fail at the end due to the fact, that index is not fully synchronized until all operators are processed. It is OK.","title":"How to rebuild an existing index from scratch"},{"location":"project/overview/","text":"Project Overview TODO Something about the GitHub action structure we use Maybe some mermaid graph - List of Workflows needed for project admin - Upgrade CI - Operator test - Operator release - Operator release manual - More info about all GitHub action points to the framework Upgrade CI Project structure","title":"Overview"},{"location":"project/overview/#project-overview","text":"","title":"Project Overview"},{"location":"project/overview/#todo","text":"Something about the GitHub action structure we use Maybe some mermaid graph - List of Workflows needed for project admin - Upgrade CI - Operator test - Operator release - Operator release manual - More info about all GitHub action points to the framework","title":"TODO"},{"location":"project/overview/#upgrade-ci","text":"","title":"Upgrade CI"},{"location":"project/overview/#project-structure","text":"","title":"Project structure"}]}