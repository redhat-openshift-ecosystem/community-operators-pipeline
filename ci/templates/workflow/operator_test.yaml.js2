name: Operator test

{% raw %}
on:
  pull_request_target:
    types: [opened, reopened, synchronize, unlabeled]
    branches:
      - master
      - main

env:
{% endraw %}
  OPP_DEBUG: 1
  OPP_CONTAINER_OPT: "-t"
  OPP_SCRIPT_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp.sh"
  OPP_SCRIPT_ENV_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-env.sh"
  OPP_SCRIPT_ENV_OPRT_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-oprt.sh"
  OPP_IMAGE: "{{ default_config.pipeline.image }}"
  OPP_ANSIBLE_PULL_REPO: "{{ default_config.pipeline.playbooks.repo }}"
  OPP_ANSIBLE_PULL_BRANCH: "{{ default_config.pipeline.playbooks.branch }}"
  OPP_THIS_REPO_BASE: "{{ default_config.pipeline.base }}"
  OPP_THIS_REPO: "{{ default_config.pipeline.repo }}"
  OPP_THIS_BRANCH: "{{ default_config.pipeline.branch }}"
  OPP_RELEASE_BUNDLE_REGISTRY: "{{ default_config.production.bundle.registry }}"
  OPP_RELEASE_BUNDLE_ORGANIZATION: "{{ default_config.production.bundle.organization }}"
  OPP_RELEASE_INDEX_REGISTRY: "{{ default_config.production.index.registry }}"
  OPP_RELEASE_INDEX_ORGANIZATION: "{{ default_config.production.index.organization }}"
  OPP_RELEASE_INDEX_NAME: "{{ default_config.production.index.name }}"
  OPP_MIRROR_INDEX_MULTIARCH_BASE: "{{ default_config.production.mirror.multiarch.base }}"
  OPP_MULTIARCH_SUPPORTED_VERSIONS: "{% for item in default_config.production.mirror.multiarch.base_tags %}{{ item }}{%- if not loop.last %} {% endif %}{% endfor %}"
  OPP_MIRROR_INDEX_MULTIARCH_POSTFIX: "s"
  IIB_INPUT_REGISTRY_USER: "{{ default_config.production.mirror.username.in }}"
  OPP_PROD: 0
  OPP_DRY_RUN: 0
  KIND_VERSION: "{{ default_config.tools.kind_version }}"
  KIND_KUBE_VERSION: "{{ default_config.tools.kind_kube_version }}"
  OPP_PRODUCTION_TYPE: "{{ default_config.production.type }}"
  OPP_REVIEWERS_ENABLED: {{ default_config.pipeline.reviewers.enabled }}
  OPP_FORCE_DEPLOY_ON_K8S_OPENSHIFT_VERSION: {{ default_config.test.force_deploy_openshift_version | default('4.8') }}
#  ARTEFACT_PATH: "/tmp/operator-test" #hardcoded for now
{% raw %}

jobs:
  pr-check:
    if: (!contains(github.event.pull_request.labels.*.name, 'do-not-merge/hold'))
    name: "PR-traffic-light"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: python -m pip install --upgrade pip yq
      - name: Operator traffic light
        id: op-traffic-light
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_PR_AUTHOR: "${{ github.event.pull_request.user.login }}"
          OPP_OPRT_REPO: "${{ github.event.pull_request.head.repo.full_name }}"
          OPP_OPRT_SHA: "${{ github.event.pull_request.head.sha }}"
          OPP_OPRT_SRC_REPO: "${{ github.event.pull_request.base.repo.full_name }}"
          OPP_OPRT_SRC_BRANCH: "${{ github.event.pull_request.base.ref }}"
        run: |
          echo "Using script '$OPP_SCRIPT_ENV_OPRT_URL' ..."
          echo "global labels $OPP_LABELS"
          bash <(curl -sL $OPP_SCRIPT_ENV_OPRT_URL)

      - name: Operator info
        id: op-info
        if: steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1'
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_PR_AUTHOR: "${{ github.event.pull_request.user.login }}"
          OPP_OPRT_REPO: "${{ github.event.pull_request.head.repo.full_name }}"
          OPP_OPRT_SHA: "${{ github.event.pull_request.head.sha }}"
          OPP_OPRT_SRC_REPO: "${{ github.event.pull_request.base.repo.full_name }}"
          OPP_OPRT_SRC_BRANCH: "${{ github.event.pull_request.base.ref }}"
          OPP_AUTO_LABEL: "${{ steps.op-traffic-light.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          ANSIBLE_FORCE_COLOR: 1
          ANSIBLE_DISPLAY_SKIPPED_HOSTS: 0
          ANSIBLE_STDOUT_CALLBACK: "yaml"
        run: |
          # OPP_ANSIBLE_PULL_BRANCH="upstream-community-dev"
          [ "$OPP_AUTO_LABEL" = '1' ] && ANSIBLE_ARGS="-e automatic_cluster_version_label=true" || ANSIBLE_ARGS="-e automatic_cluster_version_label=false"
{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% raw %}
{% endraw %}
{% else %}
{% raw %}
          ANSIBLE_ARGS="$ANSIBLE_ARGS -e stream_kind=openshift_upstream"
          echo $ANSIBLE_ARGS
{% endraw %}
{% endif %}
{% raw %}
          ansible-pull -U $OPP_ANSIBLE_PULL_REPO -C $OPP_ANSIBLE_PULL_BRANCH -i localhost, -e run_upstream=true -e run_prepare_catalog_repo_upstream=false -e run_remove_catalog_repo=false upstream/local.yml --tags reset_tools,operator_info -e operator_dir=$PWD/operators/operators/${{ steps.op-traffic-light.outputs.opp_name }} -e cluster_type=$OPP_PRODUCTION_TYPE -e strict_cluster_version_labels=true -e strict_k8s_bundles=true -e production_registry_namespace=$OPP_RELEASE_BUNDLE_REGISTRY/$OPP_RELEASE_BUNDLE_ORGANIZATION $ANSIBLE_ARGS
{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% raw %}
      - name: Operator info (result)
        id: op-info-result
        if: always() && (steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' )
        run: |
          echo "::set-output name=opp_check_err_k8s_bundles::0"
          echo "::set-output name=opp_check_err_k8s_bundles_value::"
          [ -f /tmp/operator-test/op_failed_k8s_bundles.yaml ] && echo "::set-output name=opp_check_err_k8s_bundles::1" || true
          [ -f /tmp/operator-test/op_failed_k8s_bundles.yaml ] && echo "::set-output name=opp_check_err_k8s_bundles_value::$(cat /tmp/operator-test/op_failed_k8s_bundles.yaml | yq -r '.operators | @csv' | tr -d '"')" || true
      - name: Operator info (comment)
        id: op-info-comment
        if: always() && steps.op-info-result.outputs.opp_check_err_k8s_bundles == '1' && (steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' )
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            Dear @${{ github.event.pull_request.user.login }},
            There are some operators version that are using **deprecated api** and kubernetes max versions (`operatorhub.io/ui-metadata-max-k8s-version`) is **NOT** set correctly under annotation field in CSV file.
            
            Affected versions : `${{ steps.op-info-result.outputs.opp_check_err_k8s_bundles_value }}`
            
            More info in 'Kubernetes max version in CSV' section [here](https://redhat-openshift-ecosystem.github.io/community-operators-pipeline/operator-ci-yaml/#kubernetes-max-version-in-csv).
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
{% endraw %}
{% else %}
{% raw %}
      - name: Operator info (result)
        id: op-info-result
        if: always() && (steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' )
        run: |
          echo "::set-output name=opp_check_err_cluster_version_autolabel::0"
          [ -f /tmp/operator-test/op_auto_labels.yaml ] && echo "::set-output name=opp_check_err_cluster_version_autolabel::1" || true
      - name: Operator info (comment)
        id: op-info-comment
        if: always() && steps.op-info-result.outputs.opp_check_err_cluster_version_autolabel == '1' && (steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' )
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            ## Automatic Cluster Version Label (OCP) - packagemanifest only

            Starting OCP v4.9 (based on k8s 1.22) some old API were deprecated([Deprecated API Migration Guide from v1.22](https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-22), [OKD/OpenShift Catalogs criteria and options](./packaging-required-criteria-ocp.md)). User can set `com.redhat.openshift.versions: <versions>`in its bundle `annotations.yaml` file to limit specific operator version to be visible on certain cluster.
            Users can set label only when the operator is in bundle format. For packagemanifest format it is not possible to set this lablel, but community-operators pipeline can automatically set such label to the bundle. User have to allow it by putting packagemanifestClusterVersionLabel: auto in ci.yaml file

            ```
            $ cat <path-to-operator>/ci.yaml
            packagemanifestClusterVersionLabel: auto
            ```
            More info [here](https://redhat-openshift-ecosystem.github.io/community-operators-pipeline/operator-ci-yaml/#automatic-cluster-version-label-ocp-packagemanifest-only).

          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
{% endraw %}
{% endif %}
{% raw %}
      - name: Upload operator_info
        uses: actions/upload-artifact@v2
        if: steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' 
        with:
          name: operator_info
          path: "/tmp/operator-test/op_info.yaml"
      - name: Upload converted operators
        if: steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' 
        uses: actions/upload-artifact@v2
        with:
          name: operators_converted
          path: "/tmp/operator-test/operators"
      - shell: bash
        if: steps.op-traffic-light.outputs.opp_op_delete == '0' || steps.op-traffic-light.outputs.opp_is_new_operatror == '1' || steps.op-traffic-light.outputs.opp_recreate == '1' 
        run: |
          ls /tmp/operator-test/
          cat /tmp/operator-test/op_info.yaml

    outputs:
      opp_test_ready: "${{ steps.op-traffic-light.outputs.opp_test_ready }}"
      opp_release_ready: "${{ steps.op-traffic-light.outputs.opp_release_ready }}"
      opp_stream: "${{ steps.op-traffic-light.outputs.opp_stream }}"
      opp_name: "${{ steps.op-traffic-light.outputs.opp_name }}"
      opp_version: "${{ steps.op-traffic-light.outputs.opp_version }}"
      opp_ci_yaml_only: "${{ steps.op-traffic-light.outputs.opp_ci_yaml_only }}"
      opp_op_delete: "${{ steps.op-traffic-light.outputs.opp_op_delete }}"
      opp_recreate: "${{ steps.op-traffic-light.outputs.opp_recreate }}"
      opp_is_new_operatror: "${{ steps.op-traffic-light.outputs.opp_is_new_operatror }}"
      opp_auto_packagemanifest_cluster_version_label: "${{ steps.op-traffic-light.outputs.opp_auto_packagemanifest_cluster_version_label }}"
      opp_installation_skipped: "${{ steps.op-traffic-light.outputs.opp_installation_skipped }}"

  test-kiwi:
    name: "kiwi / Full operator test"
    needs: pr-check
    if: needs.pr-check.outputs.opp_test_ready == '1' && (needs.pr-check.outputs.outputs.opp_op_delete == '0' || needs.pr-check.outputs.opp_is_new_operatror == '1' || needs.pr-check.outputs.outputs.opp_recreate == '1' )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: "/tmp/operator-test/"
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: "/tmp/operator-test/operators"
      - name: Debug artefacts
        shell: bash
        run: |
          ls /tmp/operator-test/operators
          head /tmp/operator-test/op_info.yaml
      - name: Operator test
        id: operator-test
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_INSTALLATION_SKIP: "${{ needs.pr-check.outputs.opp_installation_skipped }}"
        run: |
          echo "kiwi operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
          bash <(curl -sL $OPP_SCRIPT_URL) kiwi "operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}" || { RC=$?; echo $RC; true; }
          echo $RC
          if [[ $RC -gt 0 ]];then
            OPP_BUNDLE_VALIDATE_FILE_IN_CONTAINER=/tmp/operator-test/operator-files/operator_sdk_bundle_validate_warnings_and_errors.txt
            OPP_BUNDLE_VALIDATE_FILE=/tmp/operator_sdk_bundle_validate_warnings_and_errors.txt
            docker cp op-test:$OPP_BUNDLE_VALIDATE_FILE_IN_CONTAINER $OPP_BUNDLE_VALIDATE_FILE || true
            exit $RC
          fi

      - name: "Parse operator_sdk_bundle_validate_warnings_and_errors"
        id: op-kiwi-test-err-bundle-validate
        if: always()
        run: |
          echo "::set-output name=opp_check_err_bundle_validate::"
          OPP_BUNDLE_VALIDATE_FILE=/tmp/operator_sdk_bundle_validate_warnings_and_errors.txt
          cat $OPP_BUNDLE_VALIDATE_FILE
          if [ -f $OPP_BUNDLE_VALIDATE_FILE ] ;then
            # TODO
            OPP_BUNDLE_VALIDATE_FILE_OUTPUT=$(cat $OPP_BUNDLE_VALIDATE_FILE)
            echo "$OPP_BUNDLE_VALIDATE_FILE_OUTPUT"
            echo "opp_check_err_bundle_validate=$OPP_BUNDLE_VALIDATE_FILE_OUTPUT"
            echo "::set-output name=opp_check_err_bundle_validate::$OPP_BUNDLE_VALIDATE_FILE_OUTPUT"
          fi

      - name: "Comment operator_sdk_bundle_validate_warnings_and_errors if exists"
        if: always() && steps.op-kiwi-test-err-bundle-validate.outputs.opp_check_err_bundle_validate != ''
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            Dear @${{ github.event.pull_request.user.login }},
            :warning: | Your operator (`${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}`) has some errors or warnings while doing `operator-sdk bundle validate`. `Errors` has to be fixed and fixing `warnings` might improve your operator.

            ${{ steps.op-kiwi-test-err-bundle-validate.outputs.opp_check_err_bundle_validate }}

          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: true

      - name: "Search operator test error olm.maxOpenShiftVersion error"
        id: op-kiwi-test-err-maxOpenShiftVersion
        if: always()
        run: |
          ERR_LINES=$(cat /tmp/op-test/log.out | grep 'not specified olm.maxOpenShiftVersion' | wc -l)
          echo "opp_check_err_maxOpenShiftVersion=$ERR_LINES"
          echo "::set-output name=opp_check_err_maxOpenShiftVersion::$ERR_LINES"

      - name: "Comment operator test error olm.maxOpenShiftVersion"
        if: always() && steps.op-kiwi-test-err-maxOpenShiftVersion.outputs.opp_check_err_maxOpenShiftVersion != '0'
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            Dear @${{ github.event.pull_request.user.login }},
            :warning: | Your operator (`${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}`) might **not** run on k8s 1.22 or  in the Openshift version 4.9. **For more info see details bellow.**
            :---: | :--- |

            **IMPORTANT** : Kubernetes has been deprecating API(s) which will be removed and no longer available in 1.22 and in the Openshift version 4.9. Note that your project will be unable to use them on OCP 4.9/K8s 1.22 and then, it is strongly recommended to check [Deprecated API Migration Guide from v1.22](https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-22) and ensure that your projects have them migrated and are not using any deprecated API.
            To prevent workflow issues, its users will need to have installed in their OCP cluster a version of your operator compatible with 4.9 before they try to upgrade their cluster from any previous version to 4.9 or higher. However, If you still need to publish the operator bundles with any of these API(s) for use on earlier k8s/OCP versions, ensure that the operator bundle is configured accordingly:
            Use the olm.openShiftMaxVersion property in the CSV to prevent the user from upgrading their OCP cluster before upgrading the installed operator version to any distribution which is compatible with:
            ```yaml
            apiVersion: operators.coreos.com/v1alpha1
            kind: ClusterServiceVersion
              metadata:
                annotations:
                  # Prevent cluster upgrades to OpenShift Version 4.9 when this
                  # bundle is installed on the cluster
                  "olm.properties": '[{"type": "olm.maxOpenShiftVersion", "value": "4.8"}]'
            ```
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: true

{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% raw %}
  test-lemon:
    name: "lemon / Deploy from scratch"
    needs: pr-check
    if: needs.pr-check.outputs.opp_test_ready == '1' && (needs.pr-check.outputs.outputs.opp_op_delete == '0' || needs.pr-check.outputs.opp_is_new_operatror == '1' || needs.pr-check.outputs.outputs.opp_recreate == '1')
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Operator test
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
        run: |
          echo "lemon_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
          bash <(curl -sL $OPP_SCRIPT_URL) lemon_${OPERATOR_INDEX_TAG} "operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
{% endraw %}
{% else %}
{% raw %}
  test-lemon-openshift:
    name: "lemon / Deploy from scratch"
    needs: pr-check
    if: needs.pr-check.outputs.opp_test_ready == '1' && (needs.pr-check.outputs.opp_op_delete == '0' || needs.pr-check.outputs.opp_is_new_operatror == '1' || needs.pr-check.outputs.outputs.opp_recreate == '1')
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Debug artefacts
        shell: bash
        run: |
          ls /tmp/operator-test/operators
          head /tmp/operator-test/op_info.yaml
      - name: Operator test
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
        run: |
          echo "lemon_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
          bash <(curl -sL $OPP_SCRIPT_URL) lemon_${OPERATOR_INDEX_TAG} "operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
{% endraw %}
{% endif %}
{% raw %}

{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% raw %}
  test-orange-latest:
    name: "orange / Deploy k8s"
    needs: pr-check
    if: needs.pr-check.outputs.opp_test_ready == '1' && (needs.pr-check.outputs.opp_op_delete == '0' || needs.pr-check.outputs.opp_is_new_operatror == '1' || needs.pr-check.outputs.outputs.opp_recreate == '1' )
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Operator test
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_MIRROR_INDEX_ENABLED: 1
          OPP_IIB_INSTALL: 1
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
          OPP_INSTALLATION_SKIP: "${{ needs.pr-check.outputs.opp_installation_skipped }}"
        run: |
          echo "orange_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
          bash <(curl -sL $OPP_SCRIPT_URL) orange_${OPERATOR_INDEX_TAG} "operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
{% endraw %}
{% else %}
{% raw %}
  test-orange-openshift:
    name: "orange / Deploy o7t"
    needs: pr-check
    if: needs.pr-check.outputs.opp_test_ready == '1' && (needs.pr-check.outputs.opp_op_delete == '0' || needs.pr-check.outputs.opp_is_new_operatror == '1' || needs.pr-check.outputs.outputs.opp_recreate == '1')
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Debug artefacts
        shell: bash
        run: |
          ls /tmp/operator-test/operators
          head /tmp/operator-test/op_info.yaml
      - name: Operator test
        env:
          OPP_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
          OPP_MIRROR_INDEX_ENABLED: 1
          OPP_IIB_INSTALL: 1
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          OPP_INSTALLATION_SKIP: "${{ needs.pr-check.outputs.opp_installation_skipped }}"
        run: |
          echo "orange_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
          bash <(curl -sL $OPP_SCRIPT_URL) orange_${OPERATOR_INDEX_TAG} "operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }}"
{% endraw %}
{% endif %}
{% raw %}

  test-summary:
    name: "Summary"
{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% raw %}    
    needs: [ pr-check, test-kiwi, test-lemon, test-orange-latest]
{% endraw %}
{% else %}
{% raw %}
    needs: [ pr-check, test-kiwi, test-lemon-openshift, test-orange-openshift ]
{% endraw %}
{% endif %}
{% raw %}
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: PR
        if: needs.pr-check.outputs.opp_test_ready == '1'
        continue-on-error: true
        run: |
          echo "OP_PR=${{ github.event.pull_request.number }}"
      - name: Save PR number
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
      - uses: actions/upload-artifact@v2
        with:
          name: pr
          path: pr/
{% endraw %}
