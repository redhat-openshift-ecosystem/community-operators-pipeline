{% raw %}
name: Operator release

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      release:
        description: 'Force to run release'
        required: true
        default: '0'   
      delete:
        description: 'Delete operator (cockroachdb or cockroachdb/5.0.4) for debuging only'
        required: false
        default: ''

env:
{% endraw %}
  OPP_DEBUG: 1
  OPP_CONTAINER_OPT: "-t"
  OPP_SCRIPT_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp.sh"
  OPP_SCRIPT_ENV_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-env.sh"
  OPP_SCRIPT_ISS_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-iss.sh"
  OPP_SCRIPT_CLEANUP_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-disk-cleanup-on-startup.sh"
  OPP_SCRIPT_TRIGGER_OHIO_URL: "{{ default_config.pipeline.ci_scripts_dir }}/opp-trigger-operatorhubio-ci.sh"
  OPP_IMAGE: "{{ default_config.pipeline.image }}"
  OPP_ANSIBLE_PULL_REPO: "{{ default_config.pipeline.playbooks.repo }}"
  OPP_ANSIBLE_PULL_BRANCH: "{{ default_config.pipeline.playbooks.branch }}"
  OPP_PROD: 1
  OPP_MIRROR_LATEST_TAG: "{{ default_config.production.index.latest }}"
  OPP_PRODUCTION_TYPE: "{{ default_config.production.type }}"
  OPP_RELEASE_BUNDLE_REGISTRY: "{{ default_config.production.bundle.registry }}"
  OPP_RELEASE_BUNDLE_ORGANIZATION: "{{ default_config.production.bundle.organization }}"
  OPP_RELEASE_INDEX_REGISTRY: "{{ default_config.production.index.registry }}"
  OPP_RELEASE_INDEX_ORGANIZATION: "{{ default_config.production.index.organization }}"
  OPP_RELEASE_INDEX_NAME: "{{ default_config.production.index.name }}"
  OPP_MIRROR_INDEX_REGISTRY: "{{ default_config.production.mirror.registry }}"
  OPP_MIRROR_INDEX_ORGANIZATION: "{{ default_config.production.mirror.organization }}"
  OPP_MIRROR_INDEX_NAME: "{{ default_config.production.mirror.name }}"
  OPP_MIRROR_INDEX_ENABLED: "{{ default_config.production.mirror.enabled }}"
  OPP_MIRROR_INDEX_MULTIARCH_BASE: "{{ default_config.production.mirror.multiarch.base }}"
  OPP_MULTIARCH_SUPPORTED_VERSIONS: "{% for item in default_config.production.mirror.multiarch.base_tags %}{{ item }}{%- if not loop.last %} {% endif %}{% endfor %}"
  OPP_MIRROR_INDEX_MULTIARCH_POSTFIX: "{{ default_config.production.mirror.multiarch.postfix }}"
  IIB_INPUT_REGISTRY_USER: "{{ default_config.production.mirror.username.in }}"
  OPP_REGISTRY_MIRROR_USER: "{{ default_config.production.mirror.username.out }}"
  OPP_THIS_REPO_BASE: "{{ default_config.pipeline.base }}"
  OPP_THIS_REPO: "{{ default_config.pipeline.repo }}"
  OPP_THIS_BRANCH: "{{ default_config.pipeline.branch }}"
  OPP_REVIEWERS_ENABLED: 0

{% raw %}
  OPP_ALLOW_FORCE_RELEASE: ${{ github.event.inputs.release }}
  OPP_REMOVE_OPERATOR_AFTER_CLONE_PATH: "${{ github.event.inputs.delete }}"
  REGISTRY_RELEASE_API_TOKEN: ${{ secrets.REGISTRY_RELEASE_API_TOKEN }}
  REGISTRY_MIRROR_PW: ${{ secrets.REGISTRY_MIRROR_PW }}
  GODEBUG: x509ignoreCN=0
  CI_OHIO_TRIGGER_TOKEN: ${{ secrets.CI_OHIO_TRIGGER_TOKEN }}
  OHIO_REGISTRY_TOKEN: ${{ secrets.OHIO_REGISTRY_TOKEN }}
  QUAY_APPREG_TOKEN: ${{ secrets.QUAY_APPREG_TOKEN }}
  QUAY_COURIER_TOKEN: ${{ secrets.QUAY_COURIER_TOKEN }}
  REPO_GHA_PAT: ${{ secrets.REPO_GHA_PAT }}

jobs:
  pr-check:
    name: "PR-traffic-light"
    runs-on: ubuntu-latest
    steps:
      - name: Block until there is no running workflow
        uses: softprops/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v2
      - id: files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true
      - id: prinfo
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: python -m pip install --upgrade pip yq
      - name: Operator traffic light
        id: op-traffic-light
        env:
          OPP_ADDED_MODIFIED_FILES: "${{ steps.files.outputs.added_modified }}"
          OPP_MODIFIED_FILES: "${{ steps.files.outputs.modified }}"
          OPP_RENAMED_FILES: "${{ steps.files.outputs.renamed }}"
          OPP_REMOVED_FILES: "${{ steps.files.outputs.removed }}"
          OPP_LABELS: "${{ steps.prinfo.outputs.labels }}"
        run: |
          echo "PR : ${{ steps.prinfo.outputs.number }}"
          echo "labels : ${{ steps.prinfo.outputs.labels }}"
          echo "OPP_LABELS=$OPP_LABELS"
          echo "Using script '$OPP_SCRIPT_ENV_URL' ..."
          bash <(curl -sL $OPP_SCRIPT_ENV_URL)

    outputs:
      opp_labels: "${{ steps.prinfo.outputs.labels }}"
      opp_test_ready: "${{ steps.op-traffic-light.outputs.opp_test_ready }}"
      opp_release_ready: "${{ steps.op-traffic-light.outputs.opp_release_ready }}"
      opp_stream: "${{ steps.op-traffic-light.outputs.opp_stream }}"
      opp_name: "${{ steps.op-traffic-light.outputs.opp_name }}"
      opp_version: "${{ steps.op-traffic-light.outputs.opp_version }}"
      opp_ci_yaml_only: "${{ steps.op-traffic-light.outputs.opp_ci_yaml_only }}"
      opp_ver_overwrite: "${{ steps.op-traffic-light.outputs.opp_ver_overwrite }}"
      opp_op_delete: "${{ steps.op-traffic-light.outputs.opp_op_delete }}"
      opp_release_delete_appreg: "${{ steps.op-traffic-light.outputs.opp_release_delete_appreg }}"
      opp_pr_title: "${{ steps.op-traffic-light.outputs.opp_pr_title }}"
      opp_auto_packagemanifest_cluster_version_label: "${{ steps.op-traffic-light.outputs.opp_auto_packagemanifest_cluster_version_label }}"
{% endraw %}
{% if default_config.production.type == 'k8s' %}

  remove-{{ default_config.production.type }}:
    name: "Remove / {{ default_config.production.type }}"
{% raw %}
    needs: pr-check
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    steps:
      - name: Remove operator from index
        if: needs.pr-check.outputs.opp_op_delete == '1' && needs.pr-check.outputs.opp_name != ''
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "op_delete operators/${{ needs.pr-check.outputs.opp_name }}/dummy $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) op_delete operators/${{ needs.pr-check.outputs.opp_name }}/dummy $OPP_THIS_REPO $OPP_THIS_BRANCH
      - name: Operator release (operator version overwrite)
        if: needs.pr-check.outputs.opp_ci_yaml_only == '0' && needs.pr-check.outputs.opp_ver_overwrite == '1' && needs.pr-check.outputs.opp_name != '' && needs.pr-check.outputs.opp_version != ''
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_IIB_INSTALL: 0
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "op_delete operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) op_delete operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH

{% endraw %}
  operators-{{ default_config.production.type }}:
    name: "Index check / {{ default_config.production.type }}"
    needs: [pr-check, remove-{{ default_config.production.type }} ]
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    steps:
      - name: Index check
        id: operators
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_INDEX_CHECK_ONLY: 1
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "'orange' operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) orange operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH
      - name: Operators for sync
        run: |
          echo "Operators : ${{ steps.operators.outputs.opp_uncomplete_operators }}"
      - name: Operator info
        id: op-info
        env:
          OPP_FORCE_OPERATORS: ${{ steps.operators.outputs.opp_uncomplete_operators }}
          OPP_AUTO_LABEL: 1
          ANSIBLE_FORCE_COLOR: 1
          ANSIBLE_DISPLAY_SKIPPED_HOSTS: 0
          ANSIBLE_STDOUT_CALLBACK: "yaml"
        run: |
          # OPP_ANSIBLE_PULL_BRANCH="upstream-community-dev"
          OPP_FORCE_OPERATORS=${OPP_FORCE_OPERATORS// /,}
          echo $OPP_FORCE_OPERATORS
          [ "$OPP_AUTO_LABEL" = '1' ] && ANSIBLE_ARGS="-e automatic_cluster_version_label=true" || ANSIBLE_ARGS="-e automatic_cluster_version_label=false"
          ansible-pull -U $OPP_ANSIBLE_PULL_REPO -C $OPP_ANSIBLE_PULL_BRANCH -i localhost, -e run_upstream=true -e run_prepare_catalog_repo_upstream=true -e catalog_repo=$OPP_THIS_REPO_BASE/$OPP_THIS_REPO -e catalog_repo_branch=$OPP_THIS_BRANCH upstream/local.yml --tags reset_tools,operator_info -e operator_base_dir=/tmp/community-operators-for-catalog/operators -e operators=$OPP_FORCE_OPERATORS -e cluster_type=$OPP_PRODUCTION_TYPE -e strict_cluster_version_labels=true -e production_registry_namespace=$OPP_RELEASE_BUNDLE_REGISTRY/$OPP_RELEASE_BUNDLE_ORGANIZATION $ANSIBLE_ARGS
      - name: Upload operator_info
        uses: actions/upload-artifact@v2
        with:
          name: operator_info
          path: "/tmp/operator-test/op_info.yaml"
      - name: Upload converted operators
        uses: actions/upload-artifact@v2
        with:
          name: operators_converted
          path: "/tmp/operator-test/operators"
      - shell: bash
        run: |
          [ -f /tmp/operator-test/op_info.yaml ] && cat /tmp/operator-test/op_info.yaml || echo "::set-output name=opp_uncomplete_operators::"          
    outputs:
      opp_uncomplete_operators: "${{ steps.operators.outputs.opp_uncomplete_operators }}"

{% endraw %}
  bundles-{{ default_config.production.type }}:
    name: "Bundles / {{ default_config.production.type }}"
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }} ]
    if: needs.pr-check.outputs.opp_release_ready == '1' && needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators != ''
{% raw %}
    runs-on: ubuntu-latest
    steps:
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Build bundles
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_SKIP_INDEX: 1
{% endraw %}
          OPP_FORCE_OPERATORS: "${{ '{{' }} needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators {{ '}}' }}"
{% raw %}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "OPP_FORCE_OPERATORS=$OPP_FORCE_OPERATORS"
          echo "orange operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) orange operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH

{% endraw %}
  release-{{ default_config.production.type }}:
    name: "Index / {{ default_config.production.type }}"
    needs: [ pr-check, operators-{{ default_config.production.type }}, bundles-{{ default_config.production.type }} ]
    if: needs.pr-check.outputs.opp_release_ready == '1' && needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators != ''
{% raw %}
    runs-on: ubuntu-latest
    steps:
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Index sync
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_FORCE_INDEX_UPDATE: 1
          OPP_IIB_INSTALL: 1
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
{% endraw %}
          OPP_FORCE_OPERATORS: "${{ '{{' }} needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators {{ '}}' }}"
{% raw %}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "orange operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) orange operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH

{% endraw %}
{% else %}
  remove-{{ default_config.production.type }}:
    name: "Remove / {{ default_config.production.type }}"
{% raw %}
    needs: pr-check
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Remove operator from index
        if: needs.pr-check.outputs.opp_op_delete == '1' && needs.pr-check.outputs.opp_name != ''
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "op_delete_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/dummy $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) op_delete_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/dummy $OPP_THIS_REPO $OPP_THIS_BRANCH
      - name: Operator release (operator version overwrite)
        if: needs.pr-check.outputs.opp_ci_yaml_only == '0' && needs.pr-check.outputs.opp_ver_overwrite == '1' && needs.pr-check.outputs.opp_name != '' && needs.pr-check.outputs.opp_version != ''
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_IIB_INSTALL: 0
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "op_delete_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) op_delete_${OPERATOR_INDEX_TAG} operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH

{% endraw %}
  operators-{{ default_config.production.type }}:
    name: "Index check / {{ default_config.production.type }}"
    needs: [pr-check, remove-{{ default_config.production.type }} ]
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    steps:
      - name: List of missing operators
        id: operators
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_IIB_INSTALL: 0
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
{% endraw %}
          OPERATOR_INDEX_TAG: "{% for item in default_config.production.index.tags %}orange_{{ item }}{%- if not loop.last %} {% endif %}{% endfor %}"
{% raw %}
          OPP_INDEX_CHECK_ONLY: 1
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "'$OPERATOR_INDEX_TAG' operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) "$OPERATOR_INDEX_TAG" operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH
          
      - name: Index check
        run: |
          echo "Operators : ${{ steps.operators.outputs.opp_uncomplete_operators }}"
{% endraw %}
{% for item in default_config.production.index.tags %}
          echo "Operators ({{ item }}) : ${{ '{{' }} steps.operators.outputs.opp_uncomplete_operators_{{ item | replace('.','_') }} {{ '}}' }}"
{% endfor %}
{% raw %}
      - name: Operator info
        id: op-info
        env:
          OPP_FORCE_OPERATORS: ${{ steps.operators.outputs.opp_uncomplete_operators }}
          OPP_AUTO_LABEL: 1
          ANSIBLE_FORCE_COLOR: 1
          ANSIBLE_DISPLAY_SKIPPED_HOSTS: 0
          ANSIBLE_STDOUT_CALLBACK: "yaml"
        run: |
          # OPP_ANSIBLE_PULL_BRANCH="upstream-community-dev"
          OPP_FORCE_OPERATORS=${OPP_FORCE_OPERATORS// /,}
          echo $OPP_FORCE_OPERATORS
          [ "$OPP_AUTO_LABEL" = '1' ] && ANSIBLE_ARGS="-e automatic_cluster_version_label=true" || ANSIBLE_ARGS="-e automatic_cluster_version_label=false"
          ansible-pull -U $OPP_ANSIBLE_PULL_REPO -C $OPP_ANSIBLE_PULL_BRANCH -i localhost, -e run_upstream=true -e run_prepare_catalog_repo_upstream=true -e catalog_repo=$OPP_THIS_REPO_BASE/$OPP_THIS_REPO -e catalog_repo_branch=$OPP_THIS_BRANCH upstream/local.yml --tags reset_tools,operator_info -e operator_base_dir=/tmp/community-operators-for-catalog/operators -e operators=$OPP_FORCE_OPERATORS -e cluster_type=$OPP_PRODUCTION_TYPE -e strict_cluster_version_labels=true -e stream_kind=openshift_upstream -e production_registry_namespace=$OPP_RELEASE_BUNDLE_REGISTRY/$OPP_RELEASE_BUNDLE_ORGANIZATION $ANSIBLE_ARGS
      - name: Upload operator_info
        uses: actions/upload-artifact@v2
        with:
          name: operator_info
          path: "/tmp/operator-test/op_info.yaml"
      - name: Upload converted operators
        uses: actions/upload-artifact@v2
        with:
          name: operators_converted
          path: "/tmp/operator-test/operators"
      - shell: bash
        run: |
          [ -f /tmp/operator-test/op_info.yaml ] && cat /tmp/operator-test/op_info.yaml || echo "::set-output name=opp_uncomplete_operators::"          
    outputs:
      opp_uncomplete_operators: "${{ steps.operators.outputs.opp_uncomplete_operators }}"
{% endraw %}
{% for item in default_config.production.index.tags %}
      opp_uncomplete_operators_{{ item | replace('.','_') }}: "${{ '{{' }} steps.operators.outputs.opp_uncomplete_operators_{{ item | replace('.','_') }} {{ '}}' }}"
{% endfor %}

  bundles-{{ default_config.production.type }}:
    name: "Bundles / {{ default_config.production.type }}"
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }} ]
    if: needs.pr-check.outputs.opp_release_ready == '1' && needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators != ''
{% raw %}
    runs-on: ubuntu-latest
    steps:
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Build bundles
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_IIB_INSTALL: 0
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          OPERATOR_INDEX_TAG: latest
          OPP_SKIP_INDEX: 1
{% endraw %}
          OPP_FORCE_OPERATORS: "${{ '{{' }} needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators {{ '}}' }}"
{% raw %}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "OPP_FORCE_OPERATORS=$OPP_FORCE_OPERATORS"
          echo "orange_${OPERATOR_INDEX_TAG} operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) orange_${OPERATOR_INDEX_TAG} operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH

{% endraw %}
  release-{{ default_config.production.type }}:
    name: "Index / {{ default_config.production.type }}"
    needs: [ pr-check, operators-{{ default_config.production.type }}, bundles-{{ default_config.production.type }} ]
    if: needs.pr-check.outputs.opp_release_ready == '1' && needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators != ''
{% raw %}
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Index sync
        env:
          OPP_LABELS: "${{ needs.pr-check.outputs.opp_labels }}"
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
          OPP_IIB_INSTALL: 0
          OPP_MIRROR_INDEX_ENABLED: 0
          OPP_FORCE_INDEX_UPDATE: 1
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
{% endraw %}
          # OPP_FORCE_OPERATORS: "${{ '{{' }} needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators {{ '}}' }}"
          OPP_FORCE_OPERATORS: ""
{% for item_ver in default_config.production.index.tags %}
          OPP_FORCE_OPERATORS_{{ item_ver | replace('.','_') }}: "${{ '{{' }} needs.operators-{{ default_config.production.type }}.outputs.opp_uncomplete_operators_{{ item_ver | replace('.','_') }} {{ '}}' }}"
{% endfor %}
{% raw %}
        run: |
          echo "OPP_LABELS=$OPP_LABELS"
          echo "orange_${OPERATOR_INDEX_TAG} operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) orange_${OPERATOR_INDEX_TAG} operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH
{% endraw %}

  push-to-quay-{{ default_config.production.type }}:
    name: "Push to quay / {{ default_config.production.type }}"
{% raw %}
    needs: pr-check
    if: needs.pr-check.outputs.opp_release_ready == '1' && needs.pr-check.outputs.opp_name != '' && needs.pr-check.outputs.opp_version != ''
    runs-on: ubuntu-latest
    env:
      DELETE_APPREG: "${{ needs.pr-check.outputs.opp_release_delete_appreg }}"
      OPP_VERSION: "${{ needs.pr-check.outputs.opp_version }}"
    steps:
      - name: Push to quay
        run: |
          echo "push_to_quay operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_URL) push_to_quay operators/${{ needs.pr-check.outputs.opp_name }}/${{ needs.pr-check.outputs.opp_version }} $OPP_THIS_REPO $OPP_THIS_BRANCH || true

{% endraw %}
  release-sha-{{ default_config.production.type }}:
    name: "Index production / {{ default_config.production.type }}"
    needs: [ pr-check, release-{{ default_config.production.type }} ]
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    strategy:
      matrix:
{% endraw %}
        index-tag: {{ default_config.production.index.tags }}
{% raw %}
      fail-fast: false
    steps:
      - name: Download operator_info
        uses: actions/download-artifact@v2
        with:
          name: operator_info
          path: /tmp/operator-test/
      - name: Download converted operators
        uses: actions/download-artifact@v2
        with:
          name: operators_converted
          path: /tmp/operator-test/operators
      - name: Release sha
        env:
          IIB_INPUT_REGISTRY_TOKEN: ${{ secrets.IIB_INPUT_REGISTRY_TOKEN }}
          IIB_OUTPUT_REGISTRY_TOKEN: ${{ secrets.IIB_OUTPUT_REGISTRY_TOKEN }}
        run: |
          echo "openshift: ${{ matrix.index-tag }}"
          bash <(curl -sL $OPP_SCRIPT_ISS_URL) openshift ${{ matrix.index-tag }}
{% endraw %}
{% if default_config.production.index.signature == 1 %}
{% raw %}
      - name: Prepare variables for the sign process
        id: openshift-vars
        env:
          OPERATOR_INDEX_TAG: ${{ matrix.index-tag }}
          OPP_AUTO_PACKAGEMANIFEST_CLUSTER_VERSION_LABEL: "${{ needs.pr-check.outputs.opp_auto_packagemanifest_cluster_version_label }}"
        run: |
          docker login ${OPP_MIRROR_INDEX_REGISTRY} -u $OPP_REGISTRY_MIRROR_USER -p $REGISTRY_MIRROR_PW
          OPERATOR_INDEX_DIGEST=$(skopeo inspect docker://${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}:${OPERATOR_INDEX_TAG} | jq -r ".Digest")
          OPERATOR_INDEX_RESOLVED="${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}@${OPERATOR_INDEX_DIGEST}"
          OPERATOR_INDEX="${OPP_MIRROR_INDEX_REGISTRY}/${OPP_MIRROR_INDEX_ORGANIZATION}/${OPP_MIRROR_INDEX_NAME}:${OPERATOR_INDEX_TAG}"
          echo $OPERATOR_INDEX_RESOLVED
          echo $OPERATOR_INDEX
          echo "::set-output name=operator_index_resolved::${OPERATOR_INDEX_RESOLVED}"
          echo "::set-output name=operator_index::${OPERATOR_INDEX}"
      - name: Initialize sign process
        uses: operator-framework/community-operators@webhook
        continue-on-error: true
        env:
          INDEX_SHA: "${{ steps.openshift-vars.outputs.index_sha }}"
          webhook_type: 'json-extended'
          webhook_url: 'https://api.enterprise.redhat.com/hydra/umb-bridge/v1/publish'
          webhook_secret: ${{ secrets.SIGNATURE_WEBHOOK_SECRET }}
          data: "{\"index_image\": \"${{ steps.openshift-vars.outputs.operator_index }}\", \"index_image_resolved\": \"${{ steps.openshift-vars.outputs.operator_index_resolved }}\"}"
{% endraw %}
{% endif %}
{% endif %}
{% if default_config.operatorhubio.enabled == 1 %}
{% if default_config.production.type == 'k8s' %}
{% raw %}
{% endraw %}

  ohio-image-{{ default_config.production.type }}:
    name: "OHIO image / {{ default_config.production.type }}"
    needs: [ pr-check, release-{{ default_config.production.type }} ]
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    env:
{% endraw %}
      OHIO_INPUT_CATALOG_IMAGE: "{{ default_config.production.index.registry }}/{{ default_config.production.index.organization }}/{{ default_config.production.index.name }}:latest"
      OHIO_REGISTRY_IMAGE: "{{ default_config.operatorhubio.registry }}/{{ default_config.operatorhubio.organization }}/{{ default_config.operatorhubio.name }}:{{ default_config.operatorhubio.tag }}"
{% raw %}
    steps:
      - name: Ohio image
        run: |
          echo "ohio_image operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_CLEANUP_URL)
          bash <(curl -sL $OPP_SCRIPT_URL) ohio_image operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH
{% endraw %}
{% else %}
  ohio-image-{{ default_config.production.type }}:
    name: "OHIO image and sign 'latest' / {{ default_config.production.type }}"
    needs: [ pr-check, release-sha-{{ default_config.production.type }} ]
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    env:
      OHIO_INPUT_CATALOG_IMAGE: "quay.io/openshift-community-operators/catalog:v4.8"
      OHIO_REGISTRY_IMAGE: "quay.io/operator-framework/upstream-community-operators:dev"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare variables for the sign process
        id: openshift-vars-latest
        run: |
          docker login quay.io -u $QUAY_USER -p $QUAY_PW
          OPERATOR_INDEX_DIGEST=$(skopeo inspect docker://quay.io/${QUAY_REGISTRY}:${OPERATOR_INDEX_TAG} | jq -r ".Digest")
          OPERATOR_INDEX_RESOLVED="quay.io/${QUAY_REGISTRY}@${OPERATOR_INDEX_DIGEST}"
          OPERATOR_INDEX="quay.io/${QUAY_REGISTRY}:${OPERATOR_INDEX_TAG}"
          echo $OPERATOR_INDEX_RESOLVED
          echo $OPERATOR_INDEX
          echo "::set-output name=operator_index_resolved_latest::${OPERATOR_INDEX_RESOLVED}"
          echo "::set-output name=operator_index_latest::${OPERATOR_INDEX}"
        env:
          QUAY_REGISTRY: 'redhat/redhat----community-operator-index'
          OPERATOR_INDEX_TAG: "latest"
          QUAY_PW: ${{ secrets.QUAY_J }}
          QUAY_USER: ${{ secrets.QUAY_RH_RO_INDEX_USER }}
      - name: Initialize sign process
        uses: operator-framework/community-operators@webhook
        env:
          INDEX_SHA: "${{ steps.openshift-vars.outputs.index_sha }}"
          webhook_type: 'json-extended'
          webhook_url: 'https://api.enterprise.redhat.com/hydra/umb-bridge/v1/publish'
          webhook_secret: ${{ secrets.SIGNATURE_WEBHOOK_SECRET }}
          data: "{\"index_image\": \"${{ steps.openshift-vars-latest.outputs.operator_index_latest }}\", \"index_image_resolved\": \"${{ steps.openshift-vars-latest.outputs.operator_index_resolved_latest }}\"}"
      - name: Ohio image
        run: |
          echo "ohio_image operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH"
          bash <(curl -sL $OPP_SCRIPT_CLEANUP_URL)
          bash <(curl -sL $OPP_SCRIPT_URL) ohio_image operators/sync $OPP_THIS_REPO $OPP_THIS_BRANCH
{% endraw %}
{% endif %}
{% if default_config.production.type == 'k8s' %}
  ohio-page-{{ default_config.production.type }}:
    name: "Release / operatorhub.io"
    needs: ohio-image-{{ default_config.production.type }}
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    env:
      CI_OHIO_BRANCH: "latest"
      REPO_GHA_PAT: ${{ secrets.REPO_GHA_PAT }}
    steps:
      - name: Ohio image
        run: |
          echo "$OPP_SCRIPT_TRIGGER_OHIO_URL ${CI_OHIO_BRANCH}"
          bash <(curl -sL $OPP_SCRIPT_TRIGGER_OHIO_URL) ${CI_OHIO_BRANCH}
{% endraw %}
{% else %}
  ohio-page-{{ default_config.production.type }}:
    name: "Release / dev.operatorhub.io"
    needs: ohio-image-{{ default_config.production.type }}
{% raw %}
    if: needs.pr-check.outputs.opp_release_ready == '1'
    runs-on: ubuntu-latest
    env:
      CI_OHIO_BRANCH: "main"
    steps:
      - name: Ohio image
        run: |
          echo "$OPP_SCRIPT_TRIGGER_OHIO_URL ${CI_OHIO_BRANCH}"
          bash <(curl -sL $OPP_SCRIPT_TRIGGER_OHIO_URL) ${CI_OHIO_BRANCH}
{% endraw %}
{% endif %}
{% endif %}
{% if default_config.pipeline.notifications.slack == 1 %}
{% raw %}
  slack-notification:
    name: "Slack notification"
{% endraw %}
{% if default_config.production.type == 'k8s' %}
{% if default_config.operatorhubio.enabled == 1 %}
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }}, release-{{ default_config.production.type }}, ohio-image-{{ default_config.production.type }}, ohio-page-{{ default_config.production.type }} ]
{% else %}
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }}, release-{{ default_config.production.type }} ]
{% endif %}

{% else %}
{% if default_config.operatorhubio.enabled == 1 %}
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }}, bundles-{{ default_config.production.type }}, release-{{ default_config.production.type }}, release-sha-{{ default_config.production.type }}, ohio-image-{{ default_config.production.type }}, push-to-quay-{{ default_config.production.type }}, ohio-page-{{ default_config.production.type }} ]
{% else %}
    needs: [ pr-check, remove-{{ default_config.production.type }}, operators-{{ default_config.production.type }}, bundles-{{ default_config.production.type }}, release-{{ default_config.production.type }}, release-sha-{{ default_config.production.type }}, push-to-quay-{{ default_config.production.type }} ]
{% endif %}
{% endif %}
{% raw %}
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Report Status
        uses: ravsamhq/notify-slack-action@master
        with:
          notification_title: 'Release pipeline failed: ${{ needs.pr-check.outputs.opp_pr_title }}'
          footer: 'monitoring'
#          status: ${{ needs.pr-check.result }}
          status: 'failure'
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
        continue-on-error: true
{% endraw %}
{% endif %}
